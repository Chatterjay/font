name: Release

on:
  push:
    branches:
      - main
      - master

# 添加权限配置
permissions:
  contents: write
  
jobs:
  release:
    runs-on: windows-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 安装 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: 安装 Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: 安装 Rust 依赖
        run: rustup target add x86_64-pc-windows-msvc
        
      - name: 安装 Node 依赖
        run: npm ci
        
      - name: 获取版本号
        id: package_version
        shell: pwsh
        run: echo "version=$(node -p "require('./package.json').version")" >> $env:GITHUB_OUTPUT
        
      - name: 生成更新日志
        id: changelog
        shell: pwsh
        run: |
          $commits = git log -5 --pretty=format:"- %s (%h)" --abbrev-commit
          $commits = $commits -join "`n"
          echo "changes<<EOF" >> $env:GITHUB_OUTPUT
          echo "$commits" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT

      - name: 构建 Tauri 应用
        id: tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: v${{ steps.package_version.outputs.version }}
          releaseName: 系统字体查看器 v${{ steps.package_version.outputs.version }}
          releaseBody: |
            ## 系统字体查看器 v${{ steps.package_version.outputs.version }}
            
            ### 更新内容:
            ${{ steps.changelog.outputs.changes }}
            
            构建时间: ${{ github.event.repository.updated_at }}
            提交SHA: ${{ github.sha }}
          releaseDraft: false
          prerelease: false

      - name: 准备更新元数据
        id: metadata
        shell: pwsh
        run: |
          # 基本变量
          $version = "${{ steps.package_version.outputs.version }}"
          $tagName = "v$version"
          $date = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"
          
          # 确定MSI文件名
          $artifactPaths = '${{ steps.tauri.outputs.artifactPaths }}'
          Write-Host "构建产物: $artifactPaths"
          
          $msiFile = "Font-Viewer_${version}_x64_zh-CN.msi"
          if ($artifactPaths -match '.*Font-Viewer_.+\.msi') {
            $msiFile = $matches[0].Split('\')[-1]
            Write-Host "找到MSI文件: $msiFile"
          } else {
            Write-Host "使用默认MSI文件名: $msiFile"
          }
          
          # 输出变量
          echo "msi_file=$msiFile" >> $env:GITHUB_OUTPUT
          echo "tag_name=$tagName" >> $env:GITHUB_OUTPUT

      - name: 创建并签名更新元数据
        id: sign
        shell: pwsh
        run: |
          # 安装工具
          npm install -g @tauri-apps/cli@latest
          
          # 变量准备
          $version = "${{ steps.package_version.outputs.version }}"
          $tagName = "${{ steps.metadata.outputs.tag_name }}"
          $msiFile = "${{ steps.metadata.outputs.msi_file }}"
          $msiUrl = "https://github.com/Chatterjay/font-viewer/releases/download/$tagName/$msiFile"
          
          # 查找本地MSI文件
          $localMsiPath = "src-tauri/target/release/bundle/msi/$msiFile"
          if (-not (Test-Path $localMsiPath)) {
            Write-Host "警告: 本地无法找到MSI文件: $localMsiPath"
            exit 1
          }
          
          # 将私钥保存到临时文件
          $env:TAURI_PRIVATE_KEY | Out-File -Path tauri.key -Encoding utf8
          
          # 使用Tauri签名
          Write-Host "正在签名MSI文件..."
          $signature = npx tauri signer sign --key tauri.key --password "$env:TAURI_KEY_PASSWORD" "$localMsiPath"
          
          if (-not $signature) {
            Write-Host "错误: 签名失败"
            exit 1
          }
          
          Write-Host "签名成功!"
          
          # 创建更新元数据
          $notes = @"
## 系统字体查看器 v$version

### 更新内容:
${{ steps.changelog.outputs.changes }}
"@
          
          $metadata = @{
            version = $version
            notes = $notes
            pub_date = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            platforms = @{
              "windows-x86_64" = @{
                url = $msiUrl
                signature = $signature
              }
            }
          }
          
          # 保存元数据
          $json = ConvertTo-Json -InputObject $metadata -Depth 10
          $json | Out-File -FilePath updater.json -Encoding utf8
          $json | Out-File -FilePath latest-version.json -Encoding utf8
          
          # 清理
          Remove-Item -Path tauri.key -Force
          
          Write-Host "更新元数据创建完成"

      - name: 上传更新元数据
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.metadata.outputs.tag_name }}
          files: |
            updater.json
            latest-version.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 