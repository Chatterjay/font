name: "publish"

on:
  push:
  # Sequence of patterns matched against refs/tags
    branches:
      - main
      - release
  workflow_dispatch:
  
jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      package_version: ${{ steps.get-version.outputs.version }}

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: get version
        id: get-version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `Desktop App v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]
        include:
          - platform: windows-latest
            exePath: "nsis"
            exeArch: "x64-setup"

    runs-on: ${{ matrix.platform }}
    env:
      PACKAGE_VERSION: ${{ needs.create-release.outputs.package_version }}
    steps:
      - name: 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install frontend dependencies
        run: pnpm install # change this to npm or pnpm depending on which one you use
      - name: Get package version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - uses: tauri-apps/tauri-action@v0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: --target x86_64-pc-windows-msvc
          distPath: "../dist"
          artifactPath: ./src-tauri/target/x86_64-pc-windows-msvc/release/bundle
      
      # 上传签名文件作为工作流程产物
      - name: Upload signatures
        uses: actions/upload-artifact@v2
        with:
          name: tauri-signatures
          path: ./src-tauri/target/x86_64-pc-windows-msvc/release/bundle/**/*.sig
          if-no-files-found: warn

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri]

    steps:
      
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
            
  updater:
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri,publish-release]
    env:
      PACKAGE_VERSION: ${{ needs.create-release.outputs.package_version }}

    steps:
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 18
      - name: 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/checkout@v2
      - run: pnpm i
      
      # 下载签名文件
      - name: Download signatures
        uses: actions/download-artifact@v2
        with:
          name: tauri-signatures
          path: ./signatures
      
      - name: Add updater script
        run: |
          mkdir -p updater
          
          # 尝试找到签名文件
          SIGNATURE_FILE=$(find ./signatures -name "*.sig" | grep -i nsis | head -n 1 || echo "")
          SIGNATURE=""
          
          if [ -f "$SIGNATURE_FILE" ]; then
            SIGNATURE=$(cat "$SIGNATURE_FILE" | base64 -w 0)
          fi
          
          echo '{
            "version": "'$PACKAGE_VERSION'",
            "notes": "See the assets to download this version and install.",
            "pub_date": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
            "platforms": {
              "windows-x86_64": {
                "signature": "'$SIGNATURE'",
                "url": "https://github.com/Chatterjay/font/releases/download/v'$PACKAGE_VERSION'/Font%20Viewer_'$PACKAGE_VERSION'_x64-setup.exe"
              }
            }
          }' > updater/install.json
        env:
          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy install.json
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./updater
          force_orphan: true