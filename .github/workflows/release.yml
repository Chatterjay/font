name: 自动构建发布

on:
  push:
    branches:
      - main
      - master

# 设置必要权限
permissions:
  contents: write
  
jobs:
  build-and-release:
    name: 构建与发布
    runs-on: windows-latest
    
    env:
      PRODUCT_NAME: 系统字体查看器
      
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: 设置 Node.js 环境
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 设置 Rust 环境
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          
      - name: 添加 Windows 目标
        run: rustup target add x86_64-pc-windows-msvc
        
      - name: 安装依赖
        run: npm ci
        
      - name: 提取版本信息
        id: version
        shell: pwsh
        run: |
          $version = node -p "require('./package.json').version"
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "tag_name=v$version" >> $env:GITHUB_OUTPUT
          echo "release_name=$env:PRODUCT_NAME v$version" >> $env:GITHUB_OUTPUT
          
      - name: 生成更新日志
        id: changelog
        shell: pwsh
        run: |
          $commits = git log -5 --pretty=format:"- %s (%h)" --abbrev-commit
          $commits = $commits -join "`n"
          echo "changes<<EOF" >> $env:GITHUB_OUTPUT
          echo "$commits" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT
          
      - name: 构建 Tauri 应用
        id: tauri_build
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ steps.version.outputs.tag_name }}
          releaseName: ${{ steps.version.outputs.release_name }}
          releaseBody: |
            ## ${{ steps.version.outputs.release_name }}
            
            ### 更新内容:
            ${{ steps.changelog.outputs.changes }}
            
            构建时间: ${{ github.event.repository.updated_at }}
            提交: ${{ github.sha }}
          releaseDraft: false
          prerelease: false
          
      - name: 准备更新服务文件
        id: prepare_update
        shell: pwsh
        run: |
          # 安装必要工具
          npm install -g @tauri-apps/cli@latest
          
          # 提取MSI文件信息
          $artifactPaths = '${{ steps.tauri_build.outputs.artifactPaths }}'
          Write-Host "构建产物: $artifactPaths"
          
          $version = "${{ steps.version.outputs.version }}"
          $tagName = "${{ steps.version.outputs.tag_name }}"
          
          # 查找MSI文件
          $msiFile = $null
          $artifactPathsArray = $artifactPaths | ConvertFrom-Json
          
          foreach ($path in $artifactPathsArray) {
            if ($path -match '\.msi$' -and $path -notmatch '\.zip') {
              $msiFile = Split-Path -Path $path -Leaf
              Write-Host "找到MSI文件: $msiFile"
              break
            }
          }
          
          if (-not $msiFile) {
            Write-Host "错误: 未找到MSI文件"
            exit 1
          }
          
          # 输出变量
          echo "msi_file=$msiFile" >> $env:GITHUB_OUTPUT
          
          # 获取MSI文件的实际路径
          $localMsiPath = $artifactPathsArray | Where-Object { $_ -match [regex]::Escape($msiFile) }
          
          if (-not $localMsiPath -or -not (Test-Path $localMsiPath)) {
            Write-Host "错误: 找不到MSI文件: $localMsiPath"
            exit 1
          }
          
          # 保存私钥到临时文件
          $env:TAURI_PRIVATE_KEY | Out-File -Path tauri.key -Encoding utf8
          
          # 签名MSI文件
          Write-Host "正在签名MSI文件..."
          
          # 使用正确的tauri signer命令
          $env:TAURI_KEY_PASSWORD = "$env:TAURI_KEY_PASSWORD"
          
          try {
            # 使用npx确保命令正确执行
            npm i -g @tauri-apps/cli@latest
            
            # 使用正确的命令格式
            Write-Host "使用以下命令进行签名: tauri signer sign 文件"
            $signature = tauri signer sign --password "$env:TAURI_KEY_PASSWORD" "$localMsiPath" --key tauri.key
            
            if (-not $signature) {
              throw "签名返回为空"
            }
          } catch {
            Write-Host "捕获到错误: $_"
            # 尝试使用旧版格式
            try {
              Write-Host "尝试备用命令: tauri sign 文件"
              $signature = tauri sign --password "$env:TAURI_KEY_PASSWORD" "$localMsiPath" --key tauri.key
              
              if (-not $signature) {
                throw "备用签名命令返回为空"
              }
            } catch {
              Write-Host "签名失败: $_"
              exit 1
            }
          }
          
          Write-Host "签名成功，结果: $signature"
          
          # 准备更新元数据
          $msiUrl = "https://github.com/Chatterjay/font-viewer/releases/download/$tagName/$msiFile"
          
          # 保存更新日志到临时文件，避免YAML解析问题
          '${{ steps.changelog.outputs.changes }}' | Out-File -FilePath changelog.txt -Encoding utf8
          $changelog = Get-Content -Path changelog.txt -Raw
          
          # 创建更新元数据
          $updateData = @{
            version = $version
            notes = "## ${{ steps.version.outputs.release_name }}`n`n### 更新内容:`n$changelog"
            pub_date = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            platforms = @{
              "windows-x86_64" = @{
                url = $msiUrl
                signature = $signature
              }
            }
          }
          
          # 保存元数据文件
          $updateJson = ConvertTo-Json -InputObject $updateData -Depth 10
          $updateJson | Out-File -FilePath font-viewer-updater.json -Encoding utf8
          $updateJson | Out-File -FilePath latest-version.json -Encoding utf8
          
          # 清理临时文件
          Remove-Item -Path tauri.key -Force
          Remove-Item -Path changelog.txt -Force -ErrorAction SilentlyContinue
          
          Write-Host "更新元数据已创建"
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          
      - name: 上传更新元数据
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          files: |
            font-viewer-updater.json
            latest-version.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 