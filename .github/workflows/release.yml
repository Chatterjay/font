name: Windows Build & Release

on:
  push:
      branches: [ main ]

jobs:
  build-and-publish:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      # ========== 初始化阶段 ==========
      - name: Checkout code
        uses: actions/checkout@v4

      # ========== 环境配置 ==========
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-pc-windows-msvc

      # ========== 智能缓存清理 ==========
      - name: Clean workspace
        shell: pwsh
        run: |
          # 仅在存在 Cargo.toml 时清理
          if (Test-Path src-tauri/Cargo.toml) {
              cd src-tauri
              cargo clean
              # 安全清理缓存目录
              $cargoPaths = @(
                  "$env:USERPROFILE\.cargo\registry",
                  "$env:USERPROFILE\.cargo\git"
              )
              foreach ($path in $cargoPaths) {
                  if (Test-Path $path) {
                      Remove-Item $path -Recurse -Force -ErrorAction SilentlyContinue
                  }
              }
          }

      # ========== 依赖安装 ==========
      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli

      - name: Install project dependencies
        run: |
          npm install
          cd src-tauri
          # 强制重新生成锁文件
          if (Test-Path Cargo.lock) { Remove-Item Cargo.lock }
          cargo generate-lockfile
          cd ..

      # ========== 构建阶段 ==========
      - name: Build signed MSI
        shell: pwsh
        run: |
          cd src-tauri
          npm run tauri build -- --target x86_64-pc-windows-msvc
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      # ========== 生成更新清单 ==========
      - name: Generate latest.json
        shell: pwsh
        run: |
          $version = $env:GITHUB_REF -replace 'refs/tags/v', ''
          $msiPath = Get-Item "src-tauri/target/release/*.msi"
          $msiName = $msiPath.Name
          
          # 自动获取签名内容
          $sigContent = Get-Content "$($msiPath.FullName).sig" -Raw

          [ordered]@{
            version = $version
            notes = "Auto-generated release"
            pub_date = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
            platforms = @{
              "windows-x86_64" = @{
                signature = $sigContent.Trim()
                url = "https://github.com/chatterjay/font-viewer/releases/download/v$version/$msiName"
              }
            }
          } | ConvertTo-Json -Depth 3 | Out-File -Encoding utf8 latest.json

      # ========== 发布到 GitHub Releases ==========
      - name: Upload Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            src-tauri/target/release/*.msi
            latest.json
          draft: false
          overwrite: true