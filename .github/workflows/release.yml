name: Release

on:
  push:
    branches:
      - main
      - master

# 添加权限配置
permissions:
  contents: write
  
jobs:
  release:
    runs-on: windows-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 安装 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: 安装 Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: 安装 Rust 依赖
        run: rustup target add x86_64-pc-windows-msvc
        
      - name: 安装 Node 依赖
        run: npm ci
        
      - name: 获取版本号
        id: package_version
        shell: pwsh
        run: echo "version=$(node -p "require('./package.json').version")" >> $env:GITHUB_OUTPUT
        
      - name: 生成更新日志
        id: changelog
        shell: pwsh
        run: |
          # 如果UPDATE_LOG.md存在，从中提取当前版本的更新日志
          if (Test-Path UPDATE_LOG.md) {
            $version = "${{ steps.package_version.outputs.version }}"
            $tagPattern = "## v$version"
            $content = Get-Content UPDATE_LOG.md -Raw
            $matches = [regex]::Match($content, "(?s)$tagPattern(.*?)(?=\n## v|\z)")
            
            if ($matches.Success) {
              $changes = $matches.Groups[1].Value.Trim()
              echo "changes<<EOF" >> $env:GITHUB_OUTPUT
              echo "$changes" >> $env:GITHUB_OUTPUT
              echo "EOF" >> $env:GITHUB_OUTPUT
            } else {
              # 如果没有找到对应版本的日志，则使用最近的提交记录
              $commits = git log -5 --pretty=format:"- %s (%h)" --abbrev-commit
              $commits = $commits -join "`n"
              echo "changes<<EOF" >> $env:GITHUB_OUTPUT
              echo "$commits" >> $env:GITHUB_OUTPUT
              echo "EOF" >> $env:GITHUB_OUTPUT
            }
          } else {
            # 如果没有UPDATE_LOG.md，使用最近的提交记录
            $commits = git log -5 --pretty=format:"- %s (%h)" --abbrev-commit
            $commits = $commits -join "`n"
            echo "changes<<EOF" >> $env:GITHUB_OUTPUT
            echo "$commits" >> $env:GITHUB_OUTPUT
            echo "EOF" >> $env:GITHUB_OUTPUT
          }

      # 构建Tauri应用
      - name: 构建 Tauri 应用
        id: tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: v${{ steps.package_version.outputs.version }}
          releaseName: 系统字体查看器 v${{ steps.package_version.outputs.version }}
          releaseBody: |
            ## 系统字体查看器 v${{ steps.package_version.outputs.version }}
            
            ### 更新内容:
            ${{ steps.changelog.outputs.changes }}
            
            构建时间: ${{ github.event.repository.updated_at }}
            提交SHA: ${{ github.sha }}
          releaseDraft: false
          prerelease: false
          
      # 生成更新元数据文件
      - name: 生成更新元数据文件
        id: updater
        shell: pwsh
        run: |
          # 获取版本信息和构建时间
          $version = "${{ steps.package_version.outputs.version }}"
          $tagName = "v$version"
          $date = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          
          # 查找构建产物中的 MSI 文件
          $artifactPaths = '${{ steps.tauri.outputs.artifactPaths }}'
          Write-Host "构建产物: $artifactPaths"
          
          $artifacts = $artifactPaths | ConvertFrom-Json
          $msiFile = $null
          
          foreach ($path in $artifacts) {
            if ($path -match '\.msi$' -and $path -notmatch '\.zip') {
              $msiFile = Resolve-Path -Path $path
              $msiFileName = Split-Path -Path $msiFile -Leaf
              Write-Host "找到MSI文件: $msiFileName"
              break
            }
          }
          
          if (-not $msiFile) {
            Write-Host "错误: 未找到MSI文件"
            exit 1
          }
          
          # 准备签名过程
          Write-Host "准备对MSI文件进行签名..."
          $signature = ""
          
          try {
            # 将私钥保存到临时文件
            $privateKeyPath = "private_key.pem"
            $env:TAURI_PRIVATE_KEY | Out-File -FilePath $privateKeyPath -Encoding utf8 -NoNewline
            
            # 创建一个临时的签名脚本
            $signingScript = @'
          const fs = require('fs');
          const crypto = require('crypto');
          
          const privateKey = fs.readFileSync('PRIVATE_KEY_PATH', 'utf8');
          const fileBuffer = fs.readFileSync('MSI_FILE_PATH');
          
          const sign = crypto.createSign('SHA256');
          sign.update(fileBuffer);
          sign.end();
          
          try {
            const signature = sign.sign({ 
              key: privateKey, 
              passphrase: 'KEY_PASSWORD'
            }, 'base64');
            
            console.log(signature);
          } catch(err) {
            console.error('签名错误:', err.message);
            process.exit(1);
          }
          '@
            
            # 替换脚本中的占位符
            $signingScript = $signingScript.Replace('PRIVATE_KEY_PATH', $privateKeyPath)
            $signingScript = $signingScript.Replace('MSI_FILE_PATH', $msiFile)
            $signingScript = $signingScript.Replace('KEY_PASSWORD', "${{ secrets.TAURI_KEY_PASSWORD }}")
            
            # 将脚本写入临时文件
            $tempScriptPath = "sign_temp.js"
            Set-Content -Path $tempScriptPath -Value $signingScript
            
            # 执行签名脚本
            $signature = node $tempScriptPath
            
            if ([string]::IsNullOrWhiteSpace($signature)) {
              throw "签名失败，返回为空"
            }
            
            Write-Host "签名成功"
          } catch {
            Write-Host "签名过程出错: $_"
            Write-Host "继续但不使用签名..."
          } finally {
            # 清理临时文件
            if (Test-Path $privateKeyPath) { Remove-Item -Path $privateKeyPath -Force -ErrorAction SilentlyContinue }
            if (Test-Path $tempScriptPath) { Remove-Item -Path $tempScriptPath -Force -ErrorAction SilentlyContinue }
          }
          
          # 准备更新元数据
          $msiUrl = "https://github.com/Chatterjay/font/releases/download/$tagName/$msiFileName"
          
          # 获取更新日志内容
          $changelogContent = '${{ steps.changelog.outputs.changes }}'
          
          # 创建更新日志
          $notes = "## 系统字体查看器 v$version`n`n### 更新内容:`n$changelogContent"
          
          # 创建更新元数据
          $updateData = @{
            version = $version
            notes = $notes
            pub_date = $date
            platforms = @{
              "windows-x86_64" = @{
                url = $msiUrl
              }
            }
          }
          
          # 如果签名成功，添加签名到元数据
          if (-not [string]::IsNullOrWhiteSpace($signature)) {
            $updateData.platforms."windows-x86_64".signature = $signature
          } else {
            Write-Host "警告: 没有添加签名到更新元数据中"
          }
          
          # 转换为JSON并保存
          $updateJson = ConvertTo-Json -InputObject $updateData -Depth 10
          $updateJson | Out-File -FilePath latest-version.json -Encoding utf8
          $updateJson | Out-File -FilePath font-viewer-updater.json -Encoding utf8
          
          Write-Host "更新元数据文件已生成"
 
      # 上传更新元数据文件
      - name: 上传更新元数据
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.package_version.outputs.version }}
          files: |
            font-viewer-updater.json
            latest-version.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  