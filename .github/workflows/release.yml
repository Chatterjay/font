name: Release

on:
  push:
    branches:
      - main # 在提交到main分支时触发
      - master # 在提交到master分支时触发（适应不同的主分支命名）

# 添加权限配置
permissions:
  contents: write
  
jobs:
  release:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install dependencies (Rust)
        run: rustup target add x86_64-pc-windows-msvc
        
      - name: Install dependencies (Node)
        run: npm ci
        
      - name: Get package version
        id: package_version
        shell: pwsh
        run: echo "version=$(node -p "require('./package.json').version")" >> $env:GITHUB_OUTPUT
        
      # 提取最近的提交信息，用作更新说明
      - name: Get recent commits for changelog
        id: recent_commits
        shell: pwsh
        run: |
          $commits = git log -5 --pretty=format:"- %s (%h)" --abbrev-commit
          $commits = $commits -join "`n"
          echo "changelog<<EOF" >> $env:GITHUB_OUTPUT
          echo "$commits" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT

      - name: Build Tauri App
        id: tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: v${{ steps.package_version.outputs.version }}-${{ github.run_number }}
          releaseName: Release v${{ steps.package_version.outputs.version }}-${{ github.run_number }}
          releaseBody: |
            ## 系统字体查看器 v${{ steps.package_version.outputs.version }}
            
            ### 更新内容:
            ${{ steps.recent_commits.outputs.changelog }}
            
            构建时间: ${{ github.event.repository.updated_at }}
            提交SHA: ${{ github.sha }}
          releaseDraft: false
          prerelease: false
          
      # 构建更新元数据文件
      - name: Generate update metadata
        id: metadata
        shell: pwsh
        run: |
          $version = "${{ steps.package_version.outputs.version }}"
          $date = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"
          
          # 使用收集到的提交记录作为更新说明
          $changelog = @"
          ## 系统字体查看器 v$version
          
          ### 更新内容:
          ${{ steps.recent_commits.outputs.changelog }}
          "@
          
          $tagName = "v$version-${{ github.run_number }}"
          
          # 找出构建产物中的MSI文件
          $artifactPaths = '${{ steps.tauri.outputs.artifactPaths }}'
          Write-Host "构建产物: $artifactPaths"
          
          $artifactPathsArray = $artifactPaths | ConvertFrom-Json
          $msiFile = $null
          
          foreach ($path in $artifactPathsArray) {
            if ($path -match '\.msi$' -and $path -notmatch '\.zip') {
              $msiFile = Split-Path -Path $path -Leaf
              Write-Host "找到MSI文件: $msiFile"
              break
            }
          }
          
          if (-not $msiFile) {
            Write-Host "警告: 未找到MSI文件，使用默认名称"
            $msiFile = "Font.Viewer_${version}_x64_zh-CN.msi"
          }
          
          $platforms = @{
            "windows-x86_64" = @{
              signature = ""
              url = "https://github.com/Chatterjay/font-viewer/releases/download/$tagName/$msiFile"
            }
          }
          
          $updateData = @{
            version = $version
            notes = $changelog
            pub_date = $date
            platforms = $platforms
          }
          
          # 保存元数据为临时文件
          $updateJson = ConvertTo-Json -InputObject $updateData -Depth 5
          $updateJson | Out-File -FilePath updater.json -Encoding UTF8
          
      # 签名元数据文件
      - name: Sign update metadata
        id: sign_metadata
        shell: pwsh
        run: |
          # 安装Tauri CLI
          npm install -g @tauri-apps/cli
          
          # 保存私钥到临时文件
          $env:TAURI_PRIVATE_KEY | Out-File -FilePath private.key
          
          # 从元数据文件中获取MSI URL
          $metadata = Get-Content -Path updater.json | ConvertFrom-Json
          $msiUrl = $metadata.platforms.'windows-x86_64'.url
          
          # 下载MSI文件
          $msiFileName = Split-Path -Path $msiUrl -Leaf
          
          # 找出MSI文件的实际路径
          $artifactPaths = '${{ steps.tauri.outputs.artifactPaths }}' | ConvertFrom-Json
          $msiPath = $artifactPaths | Where-Object { $_ -match [regex]::Escape($msiFileName) }
          
          if (-not $msiPath -or -not (Test-Path $msiPath)) {
            Write-Host "错误: 找不到MSI文件路径，无法签名"
            $signature = ""
          } else {
            try {
              # 使用Tauri CLI签名MSI文件
              Write-Host "尝试签名文件: $msiPath"
              $signature = npx --yes tauri signer sign --key private.key --password "$env:TAURI_KEY_PASSWORD" "$msiPath"
              
              if ([string]::IsNullOrWhiteSpace($signature)) {
                throw "签名结果为空"
              }
              
              Write-Host "签名成功"
            } catch {
              Write-Host "签名失败: $_"
              $signature = ""
            }
          }
          
          # 更新元数据中的签名
          $metadata.platforms.'windows-x86_64'.signature = $signature
          
          # 保存更新后的元数据
          ConvertTo-Json -InputObject $metadata -Depth 10 | Set-Content -Path font-viewer-updater.json -Encoding UTF8
          ConvertTo-Json -InputObject $metadata -Depth 10 | Set-Content -Path latest-version.json -Encoding UTF8
          
          # 删除临时文件
          Remove-Item -Path private.key -Force -ErrorAction SilentlyContinue
          Remove-Item -Path updater.json -Force -ErrorAction SilentlyContinue
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      # 上传更新元数据文件
      - name: Upload update metadata
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.package_version.outputs.version }}-${{ github.run_number }}
          files: |
            font-viewer-updater.json
            latest-version.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 